#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define VERTICES 5

// Function to find the vertex with minimum key value
int minKey(int key[], int mstSet[]) {
    int min = INT_MAX, min_index;

    for (int v = 0; v < VERTICES; v++) {
        if (mstSet[v] == 0 && key[v] < min) {
            min = key[v];
            min_index = v;
        }
    }
    return min_index;
}

// Function to print the constructed MST
void printMST(int parent[], int graph[VERTICES][VERTICES]) {
    printf("Edge \tWeight\n");
    for (int i = 1; i < VERTICES; i++) {
        printf("%d - %d \t%d \n", parent[i], i, graph[i][parent[i]]);
    }
}

// Function to construct and print MST for a graph using Prim's algorithm
void primMST(int graph[VERTICES][VERTICES]) {
    int parent[VERTICES]; // Array to store constructed MST
    int key[VERTICES];    // Key values used to pick minimum weight edge in cut
    int mstSet[VERTICES]; // To represent set of vertices included in MST

    // Initialize all keys as INFINITE and mstSet[] as 0
    for (int i = 0; i < VERTICES; i++) {
        key[i] = INT_MAX;
        mstSet[i] = 0;
    }

    // Always include the first vertex in MST
    key[0] = 0;       // Make key 0 so that this vertex is picked as the first vertex
    parent[0] = -1;   // First node is always the root of MST

    for (int count = 0; count < VERTICES - 1; count++) {
        int u = minKey(key, mstSet); // Pick the minimum key vertex from the set of vertices not yet included in MST
        mstSet[u] = 1;               // Include the picked vertex in MST set

        // Update key value and parent index of the adjacent vertices of the picked vertex
        for (int v = 0; v < VERTICES; v++) {
            if (graph[u][v] && mstSet[v] == 0 && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }

    // Print the constructed MST
    printMST(parent, graph);
}

int main() {
    int graph[VERTICES][VERTICES] = {
        {0, 2, 0, 6, 0},
        {2, 0, 3, 8, 5},
        {0, 3, 0, 0, 7},
        {6, 8, 0, 0, 9},
        {0, 5, 7, 9, 0}
    };

    printf("Minimum Spanning Tree:\n");
    primMST(graph);

    return 0;
}
